const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const { WebpackManifestPlugin } = require('webpack-manifest-plugin');

const mode = process.env.NODE_ENV || 'development';
const isDev = mode === 'development';

module.exports = {
    mode,
    entry: {
        base: './assets/base.js',
        home: './assets/home.js',
    },
    output: {
        path: `${__dirname}/public/assets/`,
        filename: isDev ? '[name].js' : '[name].[contenthash].js',
        publicPath: '<%= httpPath %>assets/',
    },
    module: {
        strictExportPresence: true,
        rules: [
            {
                test: /\.(css|scss)$/,
                rules: [
                    {
                        use: {
                            loader: MiniCssExtractPlugin.loader,
                        },
                    },
                    {
                        use: {
                            loader: 'css-loader',
                        },
                    },
                    {
                        use: {
                            loader: 'postcss-loader',
                        },
                    },
                    {
                        test: /\.scss$/,
                        use: {
                            loader: 'sass-loader',
                        },
                    },
                ],
            },
            {
                test: /\.js$/,
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader',
                },
            },
            {
                test: /\.(jpg|woff|woff2|ttf|eot|otf|svg)$/,
                use: {
                    loader: 'file-loader',
                },
            },
        ],
    },
    plugins: [
        new MiniCssExtractPlugin({
            filename: isDev ? '[name].css' : '[name].[contenthash].css',
            chunkFilename: isDev ? '[id].css' : '[id].[contenthash].css',
        }),
        new WebpackManifestPlugin({
            fileName: `${__dirname}/var/manifest.json`,
            writeToFileEmit: true,
        }),
    ],
    devServer: {
        allowedHosts: 'all',
        static: false,
        proxy: {
            '<%= httpPath %>': 'http://<%= packageName %>-nginx',
        },
        client: {
            webSocketURL: 'auto://0.0.0.0:0<%= httpPath %>ws',
        },
    },
};
