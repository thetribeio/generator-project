version: '2.1'

orbs:
  docker: circleci/docker@2.0.1
<% if (twig) { %>
  node: circleci/node@4.5.1
<% } %>
  php: circleci/php@1.1.0

executors:
<% if (twig) { %>
  node:
    docker:
      - image: node:22.15.1
<% } %>
  php:
    docker:
      - image: php:8.2.2

commands:
  install-composer:
    steps:
      - run:
          name: Install composer
          command: |
            curl -f -L "https://getcomposer.org/download/2.8.1/composer.phar" -o /usr/local/bin/composer
            echo "930b376fbd2147a623ea7b704eb9d3b8b0d6072992207aa0535aa21f6f05378e /usr/local/bin/composer" | sha256sum -c -
            chmod 755 /usr/local/bin/composer
          working_directory: /tmp/
  install-php-extensions:
    parameters:
      extensions:
        type: string
    steps:
      - run:
          name: Install PHP extensions
          command: |
            curl --fail --location --output /usr/local/bin/install-php-extensions https://raw.githubusercontent.com/mlocati/docker-php-extension-installer/1.0.4/install-php-extensions
            echo "8bb61096c6cb1edc4d5039cf085c0e774f222c45d3f0546f3c58053a58253fb7 /usr/local/bin/install-php-extensions" | sha256sum -c -
            chmod uga+x /usr/local/bin/install-php-extensions

            install-php-extensions << parameters.extensions >>
          working_directory: /tmp/

jobs:
  <%= packageName %>-php-dependencies:
    docker:
      - image: composer/composer:2.2.6
    steps:
      - checkout
      - php/install-packages:
          app-dir: <%= packagePath %>
          install-flags: --ignore-platform-reqs --no-scripts
      - persist_to_workspace:
          root: .
          paths:
            - <%= packagePath %>/vendor

  <%= packageName %>-php-lint:
    executor: php
    working_directory: ~/project/<%= packagePath %>
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project
      - run:
          name: PHP-CS-Fixer
          command: vendor/bin/php-cs-fixer fix --dry-run --diff --using-cache no
      - run:
          name: PHPStan
          command: vendor/bin/phpstan analyse src tests

  <%= packageName %>-migrations:
    docker:
      - image: php:8.2.2
        environment:
          DATABASE_URL: postgresql://thetribe:424242@localhost:5432/thetribe
      - image: postgres:12.5
        environment:
          POSTGRES_USER: thetribe
          POSTGRES_PASSWORD: 424242
    working_directory: ~/project/<%= packagePath %>
    steps:
      - install-php-extensions:
          extensions: intl pdo_pgsql
      - checkout:
          path: ~/project
      - docker/install-dockerize
      - attach_workspace:
          at: ~/project
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration
      - run: bin/console doctrine:schema:validate

  <% if (twig) { %>
  <%= packageName %>-yarn-install:
    executor: node
    steps:
      - checkout
      - node/install-packages:
          app-dir: <%= packagePath %>
          include-branch-in-cache-key: false
          pkg-manager: yarn
      - persist_to_workspace:
          root: .
          paths:
            - <%= packagePath %>/node_modules
  <%= packageName %>-lint-js:
    executor: node
    working_directory: ~/project/<%= packagePath %>
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project
      - run: yarn lint:js

  <%= packageName %>-lint-scss:
    executor: node
    working_directory: ~/project/<%= packagePath %>
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project
      - run: yarn lint:scss

  <%= packageName %>-lint-twig:
    executor: php
    working_directory: ~/project/<%= packagePath %>
    environment:
      APP_ENV: prod
    steps:
      - install-php-extensions:
          extensions: intl
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project
      - run:
          name: Lint
          command: bin/console lint:twig templates
  <% } %>

  <% if (deployment === 'ansible') { %>
  <% if (twig) { %>
  <%= packageName %>-build-assets:
    executor: node
    working_directory: ~/project/<%= packagePath %>
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project
      - run: yarn build
      - persist_to_workspace:
          root: ~/project
          paths:
            - <%= packagePath %>/public/assets
            - <%= packagePath %>/var/manifest.json
  <% } %>

  <%= packageName %>-build:
    executor: php
    environment:
      APP_ENV: prod
    working_directory: ~/project/<%= packagePath %>
    steps:
      - install-php-extensions:
          extensions: intl
      - install-composer
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project
      - run: composer install --ignore-platform-reqs --no-scripts --no-dev --optimize-autoloader --classmap-authoritative
      - run: bin/console cache:warmup
      - run: bin/console assets:install
      - run:
          name: Create archive
          command: |
            tar -czf archive.tar.gz --owner=0 --group=0 \
              bin/console \
              config/bootstrap.php \
              config/bundles.php \
              migrations/ \
              public/ \
              src/ \
              <%_ if (twig) { _%>
              templates/ \
              <%_ } _%>
              var/cache/prod/ \
              <%_ if (twig) { _%>
              var/manifest.json \
              <%_ } _%>
              vendor/ \
      - store_artifacts:
          path: archive.tar.gz
          destination: <%= packageName %>.tar.gz
      - persist_to_workspace:
          root: ~/project
          paths:
            - <%= packagePath %>/archive.tar.gz
  <% } %>

  <% if (deployment === 'kubernetes') { %>
  <%= packageName %>-build:
    executor: docker/docker
    steps:
      - setup_remote_docker:
          version: 20.10.11
      - checkout
      - docker/build:
          image: <%= projectName %>/<%= packageName %>/php
          path: <%= packagePath %>
          docker-context: <%= packagePath %>
          extra_build_args: '--target=php --build-arg VERSION=$(git log --max-count 1 --pretty=format:%H "<%= packagePath %>")'
      - docker/build:
          image: <%= projectName %>/<%= packageName %>/nginx
          path: <%= packagePath %>
          docker-context: <%= packagePath %>
          extra_build_args: '--target=nginx --build-arg VERSION=$(git log --max-count 1 --pretty=format:%H "<%= packagePath %>")'
  <%= packageName %>-build-and-push:
    executor: docker/docker
    steps:
      - setup_remote_docker:
          version: 20.10.11
      - checkout
      - docker/build:
          registry: $DOCKER_REGISTRY
          image: <%= projectName %>/<%= packageName %>/php
          tag: << pipeline.git.branch >>
          path: <%= packagePath %>
          docker-context: <%= packagePath %>
          extra_build_args: '--target=php --build-arg VERSION=$(git log --max-count 1 --pretty=format:%H "<%= packagePath %>")'
      - docker/build:
          registry: $DOCKER_REGISTRY
          image: <%= projectName %>/<%= packageName %>/nginx
          tag: << pipeline.git.branch >>
          path: <%= packagePath %>
          docker-context: <%= packagePath %>
          extra_build_args: '--target=nginx --build-arg VERSION=$(git log --max-count 1 --pretty=format:%H "<%= packagePath %>")'
      <% if (twig) { %>
      - docker/build:
          registry: $DOCKER_REGISTRY
          image: <%= projectName %>/<%= packageName %>/sentry
          tag: << pipeline.git.branch >>
          path: <%= packagePath %>
          docker-context: <%= packagePath %>
          extra_build_args: '--target=sentry --build-arg VERSION=$(git log --max-count 1 --pretty=format:%H "<%= packagePath %>")'
      <% } %>
      - docker/check:
          registry: $DOCKER_REGISTRY
      - docker/push:
          registry: $DOCKER_REGISTRY
          image: <%= projectName %>/<%= packageName %>/php
          tag: << pipeline.git.branch >>
      - docker/push:
          registry: $DOCKER_REGISTRY
          image: <%= projectName %>/<%= packageName %>/nginx
          tag: << pipeline.git.branch >>
      <% if (twig) { %>
      - run:
          name: Publish source maps to sentry
          command: |
            IMAGE="$DOCKER_REGISTRY/<%= projectName %>/<%= packageName %>/sentry:<< pipeline.git.branch >>"
            ENV="--env SENTRY_AUTH_TOKEN --env SENTRY_ORG --env SENTRY_PROJECT=<%= projectName %>-<%= packageName %>"
            VERSION=<%= projectName %>-<%= packageName %>@$(git log --max-count 1 --pretty=format:%H "<%= packagePath %>")

            docker run --rm $ENV $IMAGE releases new $VERSION
            docker run --rm $ENV $IMAGE releases files $VERSION upload-sourcemaps ./assets
            docker run --rm $ENV $IMAGE releases finalize $VERSION
      <% } %>
  <% } %>

workflows:
  version: '2'
  build:
    jobs:
      - <%= packageName %>-php-dependencies
      - <%= packageName %>-php-lint:
          requires:
            - <%= packageName %>-php-dependencies
      - <%= packageName %>-migrations:
          requires:
            - <%= packageName %>-php-dependencies
      <% if (twig) { %>
      - <%= packageName %>-lint-js:
          requires:
            - <%= packageName %>-yarn-install
      - <%= packageName %>-lint-scss:
          requires:
            - <%= packageName %>-yarn-install
      - <%= packageName %>-lint-twig:
          requires:
            - <%= packageName %>-php-dependencies
      - <%= packageName %>-yarn-install
      <% } %>

      <% if (deployment === 'ansible') { %>
      <% if (twig) { %>
      - <%= packageName %>-build-assets:
          requires:
            - <%= packageName %>-yarn-install
      <% } %>
      - <%= packageName %>-build:
          requires:
            - <%= packageName %>-php-dependencies
            <% if (twig) { %>
            - <%= packageName %>-build-assets
            <% } %>
      <% } %>

      <% if (deployment === 'kubernetes') { %>
      - <%= packageName %>-build-and-push:
          context:
            - docker-registry
            <% if (twig) { %>
            - sentry.io
            <% } %>
          requires:
            - <%= packageName %>-migrations
            - <%= packageName %>-php-lint
            <% if (twig) { %>
            - <%= packageName %>-lint-js
            - <%= packageName %>-lint-scss
            - <%= packageName %>-lint-twig
            <% } %>
          filters:
            branches:
              only:
                - develop
                - main
      - <%= packageName %>-build:
          requires:
            - <%= packageName %>-migrations
            - <%= packageName %>-php-lint
            <% if (twig) { %>
            - <%= packageName %>-lint-js
            - <%= packageName %>-lint-scss
            - <%= packageName %>-lint-twig
            <% } %>
          filters:
            branches:
              ignore:
                - develop
                - main
      <% } %>
